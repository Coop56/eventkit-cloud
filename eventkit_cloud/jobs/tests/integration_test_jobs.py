# -*- coding: utf-8 -*-
import json
import logging
import os
import requests
import shutil
import sqlite3
from time import sleep

from ...tasks.models import ExportTask, ExportProviderTask
from ...tasks.export_tasks import TaskStates
from ..models import ExportProvider, ExportProviderType, Job
from ...utils.geopackage import check_content_exists, check_zoom_levels

from django.conf import settings
from django.core.urlresolvers import reverse
from django.db import IntegrityError
from django.test import TestCase
from django.utils import timezone
from django.core.cache import cache

logger = logging.getLogger(__name__)


class TestJob(TestCase):
    """
    Test cases for Job model
    """

    def setUp(self):
        username = 'admin'
        password = '@dm1n'
        self.base_url = os.getenv('BASE_URL', 'http://{0}'.format(getattr(settings,"SITE_NAME", "cloud.eventkit.dev")))
        self.login_url = self.base_url + '/auth'
        self.create_export_url = self.base_url + '/exports/create'
        self.jobs_url = self.base_url + reverse('api:jobs-list')
        self.runs_url = self.base_url + reverse('api:runs-list')
        self.rerun_url = self.base_url + '/api/rerun'
        self.download_dir = os.path.join(os.getenv('EXPORT_STAGING_ROOT', '.'), "test")
        if not os.path.exists(self.download_dir):
            os.makedirs(self.download_dir, mode=0660)
        self.client = requests.session()
        self.client.get(self.login_url)
        self.csrftoken = self.client.cookies['csrftoken']

        login_data = dict(username=username, password=password, csrfmiddlewaretoken=self.csrftoken, next='/')
        self.client.post(self.login_url, data=login_data, headers=dict(Referer=self.login_url),
                         auth=(username, password))
        self.client.get(self.base_url)
        self.client.get(self.create_export_url)
        self.csrftoken = self.client.cookies['csrftoken']
        self.bbox = ["-0.077419", "50.778155", "-0.037251", "50.818517"]

    def tearDown(self):
        if os.path.exists(self.download_dir):
            shutil.rmtree(self.download_dir)

    def test_osm_geopackage(self):
        """
        This test is to ensure that an OSM file by itself only exporting GeoPackage returns data.
        :return:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data (Generic)", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_cancel_job(self):

        #update provider to ensure it runs long enough to cancel...
        export_provider = ExportProvider.objects.get(slug="eventkit-integration-test-wms")
        original_level_to = export_provider.level_to
        export_provider.level_to = 19
        export_provider.save()

        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "eventkit-integration-test-wms", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wms", "formats": ["gpkg"]}]}

        job_json = self.run_job(job_data, wait_for_run=False)

        run_json = self.wait_for_task_pickup(job_uid=job_json.get('uid'))

        export_provider_task = ExportProviderTask.objects.get(uid=run_json.get('provider_tasks')[0].get('uid'))

        self.client.get(self.create_export_url) 
        self.csrftoken = self.client.cookies['csrftoken']

        provider_url = self.base_url + reverse('api:provider_tasks-list') + '/{0}'.format(export_provider_task.uid)
        response = self.client.patch(provider_url,
                                    headers={'X-CSRFToken': self.csrftoken,
                                             'referer': self.create_export_url})
        self.assertEqual(200, response.status_code)
        self.assertEqual({'success': True}, json.loads(response.content))
        self.orm_job = Job.objects.get(uid=job_json.get('uid'))
        self.orm_run = self.orm_job.runs.last()

        pt = ExportProviderTask.objects.get(uid=export_provider_task.uid)

        self.assertTrue(all(_.status == TaskStates.CANCELED.value for _ in pt.tasks.all()))
        self.assertEqual(pt.status, TaskStates.CANCELED.value)

        self.wait_for_run(self.orm_job.uid)
        self.orm_run = self.orm_job.runs.last()
        self.assertEqual(self.orm_run.status, TaskStates.CANCELED.value)

        # update provider to original setting.
        export_provider = ExportProvider.objects.get(slug="eventkit-integration-test-wms")
        export_provider.level_to = original_level_to
        export_provider.save()

        delete_response = self.client.delete(self.jobs_url + '/' + job_json.get('uid'),
                                             headers={'X-CSRFToken': self.csrftoken, 'Referer': self.create_export_url})
        self.assertTrue(delete_response)

    def test_osm_geopackage_thematic(self):
        """
        This test is to ensure that an OSM job will export a thematic GeoPackage.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestThematicGPKG",
                    "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_osm_sqlite(self):
        """
        This test is to ensure that an OSM will export a sqlite file.
        :return:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestSQLITE", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data (Generic)", "formats": ["sqlite"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_osm_sqlite_thematic(self):
        """
        This test is to ensure that an OSM job will export a thematic sqlite file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestThematicSQLITE",
                    "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data", "formats": ["sqlite"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_osm_shp(self):
        """
        This test is to ensure that an OSM job will export a shp.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestSHP", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data (Generic)", "formats": ["shp"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_osm_shp_thematic(self):
        """
        This test is to ensure that an OSM job will export a thematic shp.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestThematicSHP", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data", "formats": ["shp"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_osm_kml(self):
        """
        This test is to ensure that an OSM job will export a kml file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestKML", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data (Generic)", "formats": ["kml"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_osm_kml_thematic(self):
        """
        This test is to ensure that an OSM job will export a kml file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestThematicKML", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data", "formats": ["kml"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_wms_gpkg(self):
        """
        This test is to ensure that an WMS job will export a gpkg file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG-WMS", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wms", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_wmts_gpkg(self):
        """
        This test is to ensure that an WMTS job will export a gpkg file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG-WMTS", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wmts", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_arcgis_gpkg(self):
        """
        This test is to ensure that an ArcGIS job will export a gpkg file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG-Arc-Raster",
                    "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-arc-raster", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_wfs_gpkg(self):
        """
        This test is to ensure that an WFS job will export a gpkg file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG-WFS", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wfs", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_wfs_shp(self):
        """
        This test is to ensure that an WFS job will export a shp file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestSHP-WFS", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wfs", "formats": ["shp"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_wfs_sqlite(self):
        """
        This test is to ensure that an WFS job will export a sqlite file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestSQLITE-WFS", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wfs", "formats": ["sqlite"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_wfs_kml(self):
        """
        This test is to ensure that an WFS job will export a gpkg file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestKML-WFS", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wfs", "formats": ["kml"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_arcgis_feature_service(self):
        """
        This test is to ensure that an ArcGIS Feature Service job will export a gpkg file.
        :returns:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG-Arcfs", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-arc-fs", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_osm_geojson(self):
        """
        This test is to ensure that an ArcGIS Feature Service job will export a gpkg file.
        :returns:
        """
        geojson = {"type":"FeatureCollection","features":[{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[-0.04269238627859867,50.80008648458974],[-0.04269238627859867,50.80010566394145],[-0.04269238627859867,50.80012484328532],[-0.04266204054767084,50.80012484328532],[-0.042631694816742984,50.80014402262128],[-0.04260134908581514,50.8001632019494],[-0.042571003354887296,50.8001632019494],[-0.04254065762395946,50.80018238126962],[-0.042510311893031616,50.80018238126962],[-0.042479966162103776,50.80018238126962],[-0.042449620431175936,50.80022073988647],[-0.04238892896932024,50.80022073988647],[-0.04226754604560887,50.80023991918313],[-0.04223720031468102,50.80023991918313],[-0.04220685458375318,50.80023991918313],[-0.04217650885282534,50.800259098471855],[-0.042146163121897486,50.800259098471855],[-0.042115817390969645,50.80027827775274],[-0.042115817390969645,50.80027827775274],[-0.0420854716600418,50.80029745702575],[-0.04205512592911396,50.80031663629089],[-0.04199443446725827,50.80031663629089],[-0.04190339727447475,50.800354994797544],[-0.041873051543546896,50.800354994797544],[-0.04184270581261905,50.800354994797544],[-0.04184270581261905,50.800354994797544],[-0.04178201435076336,50.800374174039064],[-0.04178201435076336,50.800412532498484],[-0.041751668619835515,50.800412532498484],[-0.04172132288890768,50.800431711716385],[-0.041660631427051995,50.800431711716385],[-0.041630285696124154,50.80045089092641],[-0.04159993996519631,50.80048924932285],[-0.04153924850334062,50.80050842850926],[-0.041478557041484926,50.8005276076878],[-0.041448211310557086,50.80054678685849],[-0.0413875198487014,50.80056596602128],[-0.04135717411777356,50.80058514517623],[-0.04132682838684571,50.80058514517623],[-0.041296482655917864,50.800604324323274],[-0.041266136924990024,50.80062350346245],[-0.04123579119406218,50.80062350346245],[-0.04120544546313433,50.80062350346245],[-0.04117509973220649,50.80062350346245],[-0.04114475400127865,50.800642682593775],[-0.04108406253942297,50.800642682593775],[-0.04108406253942297,50.800642682593775],[-0.041053716808495115,50.8006618617172],[-0.04102337107756727,50.80068104083276],[-0.040993025346639435,50.80070021994047],[-0.04096267961571158,50.800719399040304],[-0.04096267961571158,50.800719399040304],[-0.040932333884783734,50.80073857813224],[-0.040901988153855894,50.80073857813224],[-0.040901988153855894,50.80073857813224],[-0.04087164242292806,50.80075775721633],[-0.04081095096107237,50.80079611536087],[-0.04078060523014453,50.80081529442134],[-0.04075025949921668,50.80081529442134],[-0.04071991376828884,50.80085365251864],[-0.040659222306433145,50.800872831555495],[-0.040659222306433145,50.800872831555495],[-0.040628876575505304,50.80089201058445],[-0.040628876575505304,50.80089201058445],[-0.040598530844577464,50.80091118960556],[-0.04056818511364962,50.80093036861882],[-0.04053783938272178,50.80093036861882],[-0.04047714792086608,50.800968726621676],[-0.040416456459010396,50.800987905611265],[-0.040386110728082555,50.80100708459301],[-0.04026472780437119,50.80102626356691],[-0.04023438207344335,50.80102626356691],[-0.04023438207344335,50.80102626356691],[-0.040204036342515494,50.80104544253288],[-0.04017369061158765,50.80108380044129],[-0.0401433448806598,50.80108380044129],[-0.04011299914973196,50.80110297938367],[-0.04008265341880411,50.80110297938367],[-0.04002196195694843,50.80112215831818],[-0.0399309247641649,50.801160516163634],[-0.03990057903323706,50.801160516163634],[-0.03987023330230921,50.801179695074495],[-0.03983988757138137,50.80119887397754],[-0.03980954184045352,50.801218052872684],[-0.03977919610952568,50.801218052872684],[-0.03974885037859784,50.801237231759984],[-0.039718504647669996,50.80125641063941],[-0.039718504647669996,50.80125641063941],[-0.039688158916742156,50.80127558951094],[-0.03965781318581431,50.80129476837459],[-0.03962746745488646,50.8013139472304],[-0.03953643026210293,50.80135230491837],[-0.03950608453117509,50.801390662574875],[-0.03947573880024725,50.801390662574875],[-0.0394453930693194,50.80142902019983],[-0.039415047338391566,50.80144819900056],[-0.039415047338391566,50.80144819900056],[-0.03938470160746371,50.80148655657834],[-0.039354355876535865,50.80150573535542],[-0.03932401014560802,50.8015249141246],[-0.03932401014560802,50.8015249141246],[-0.03929366441468018,50.801563271639424],[-0.03923297295282449,50.8016016291227],[-0.03920262722189666,50.8016208078526],[-0.03917228149096881,50.80163998657457],[-0.03914193576004097,50.80165916528867],[-0.03914193576004097,50.80165916528867],[-0.03911159002911312,50.801678343994894],[-0.03911159002911312,50.801678343994894],[-0.039081244298185276,50.8017167013837],[-0.03905089856725742,50.8017167013837],[-0.03905089856725742,50.801755058741094],[-0.03899020710540174,50.801774237407955],[-0.0389598613744739,50.801812594718086],[-0.03892951564354606,50.801812594718086],[-0.038899169912618214,50.80183177336136],[-0.038899169912618214,50.80183177336136],[-0.038868824181690374,50.80187013062425],[-0.038868824181690374,50.80192766645956],[-0.038868824181690374,50.80192766645956],[-0.03883847845076253,50.801985202224046],[-0.03883847845076253,50.801985202224046],[-0.03880813271983468,50.802042737917645],[-0.03877778698890684,50.802061916466414],[-0.03877778698890684,50.802061916466414],[-0.03874744125797899,50.80208109500734],[-0.03874744125797899,50.8021194520656],[-0.038717095527051146,50.802157809092336],[-0.038686749796123306,50.802176987593896],[-0.038686749796123306,50.802215344573426],[-0.038656404065195465,50.802234523051396],[-0.038656404065195465,50.80227287998366],[-0.038656404065195465,50.80227287998366],[-0.03862605833426762,50.802349593753746],[-0.038595712603339785,50.80236877217661],[-0.03856536687241193,50.80240712899868],[-0.03853502114148409,50.80242630739795],[-0.038504675410556244,50.80244548578929],[-0.038504675410556244,50.80244548578929],[-0.0384743296796284,50.802483842548384],[-0.0384743296796284,50.802483842548384],[-0.0384743296796284,50.80254137762802],[-0.03844398394870056,50.80256055597215],[-0.03844398394870056,50.80256055597215],[-0.03844398394870056,50.80261809095728],[-0.03841363821777271,50.80263726926992],[-0.03841363821777271,50.80263726926992],[-0.03841363821777271,50.802675625871586],[-0.03841363821777271,50.802675625871586],[-0.03841363821777271,50.802733160715064],[-0.03841363821777271,50.80277151723803],[-0.03841363821777271,50.80277151723803],[-0.03841363821777271,50.802829051963414],[-0.03841363821777271,50.802829051963414],[-0.03841363821777271,50.80286740840765],[-0.038383292486844876,50.80288658661797],[-0.038383292486844876,50.80288658661797],[-0.03835294675591703,50.80294412120165],[-0.03835294675591703,50.80294412120165],[-0.038322601024989175,50.80300165571447],[-0.038322601024989175,50.80304001201705],[-0.038322601024989175,50.80304001201705],[-0.038322601024989175,50.803116724527655],[-0.038322601024989175,50.803116724527655],[-0.038322601024989175,50.803174258827966],[-0.038322601024989175,50.803174258827966],[-0.03829225529406134,50.80321261498884],[-0.03829225529406134,50.80321261498884],[-0.03829225529406134,50.80325097111822],[-0.03829225529406134,50.80325097111822],[-0.03829225529406134,50.80328932721608],[-0.03829225529406134,50.80334686130385],[-0.03829225529406134,50.80342357331068],[-0.038261909563133495,50.80351946314212],[-0.038261909563133495,50.80351946314212],[-0.038261909563133495,50.803557819019545],[-0.038261909563133495,50.803557819019545],[-0.038261909563133495,50.80361535277672],[-0.038261909563133495,50.803653708575496],[-0.038261909563133495,50.803653708575496],[-0.038261909563133495,50.803711242214604],[-0.038261909563133495,50.803711242214604],[-0.038261909563133495,50.803749597934626],[-0.038261909563133495,50.803749597934626],[-0.038261909563133495,50.803787953623186],[-0.038261909563133495,50.803787953623186],[-0.038261909563133495,50.803826309280225],[-0.038261909563133495,50.803826309280225],[-0.038261909563133495,50.803883842706796],[-0.038261909563133495,50.803883842706796],[-0.038261909563133495,50.80392219828511],[-0.038261909563133495,50.803960553831956],[-0.038261909563133495,50.803960553831956],[-0.038261909563133495,50.80399890934734],[-0.03829225529406134,50.80403726483121],[-0.03829225529406134,50.80403726483121],[-0.03829225529406134,50.804094797998005],[-0.03829225529406134,50.804094797998005],[-0.03829225529406134,50.8041331534032],[-0.03829225529406134,50.8041331534032],[-0.038322601024989175,50.804152331093945],[-0.038322601024989175,50.804152331093945],[-0.03835294675591703,50.8041906864519],[-0.038383292486844876,50.80420986411906],[-0.038383292486844876,50.80420986411906],[-0.03841363821777271,50.80424821942978],[-0.03844398394870056,50.80426739707332],[-0.038504675410556244,50.8043057523368],[-0.03853502114148409,50.80432492995672],[-0.03856536687241193,50.804344107568795],[-0.03856536687241193,50.804344107568795],[-0.03862605833426762,50.8043824627693],[-0.038656404065195465,50.804401640357725],[-0.038686749796123306,50.80443999551102],[-0.038686749796123306,50.80443999551102],[-0.03874744125797899,50.804459173075855],[-0.03874744125797899,50.804459173075855],[-0.03880813271983468,50.804497528181884],[-0.03880813271983468,50.804497528181884],[-0.0389598613744739,50.804574238299494],[-0.03902055283632959,50.80461259331108],[-0.03905089856725742,50.80463177080509],[-0.03914193576004097,50.8046893032398],[-0.03917228149096881,50.80470848070232],[-0.03920262722189666,50.80472765815696],[-0.03923297295282449,50.80474683560368],[-0.03923297295282449,50.80474683560368],[-0.03929366441468018,50.80476601304255],[-0.03932401014560802,50.80478519047358],[-0.039354355876535865,50.80480436789671],[-0.039354355876535865,50.80480436789671],[-0.039415047338391566,50.80482354531199],[-0.039415047338391566,50.80482354531199],[-0.039415047338391566,50.80486190011891],[-0.03947573880024725,50.80486190011891],[-0.03947573880024725,50.80486190011891],[-0.03950608453117509,50.804919432270225],[-0.039597121723958614,50.80495778699844],[-0.03962746745488646,50.80499614169517],[-0.03965781318581431,50.805034496360406],[-0.039688158916742156,50.805053673681215],[-0.03974885037859784,50.805053673681215],[-0.03974885037859784,50.805053673681215],[-0.03977919610952568,50.80507285099415],[-0.03977919610952568,50.80507285099415],[-0.03980954184045352,50.805092028299214],[-0.03983988757138137,50.805111205596404],[-0.03983988757138137,50.805111205596404],[-0.03990057903323706,50.80513038288572],[-0.03996127049509275,50.80513038288572],[-0.03999161622602059,50.805149560167166],[-0.04005230768787628,50.80516873744074],[-0.04011299914973196,50.80516873744074],[-0.04017369061158765,50.80516873744074],[-0.04017369061158765,50.80516873744074],[-0.04023438207344335,50.80516873744074],[-0.04044680218993824,50.80518791470644],[-0.04050749365179394,50.80518791470644],[-0.04056818511364962,50.80518791470644],[-0.040628876575505304,50.80518791470644],[-0.04068956803736099,50.80518791470644],[-0.04068956803736099,50.80518791470644],[-0.04078060523014453,50.80518791470644],[-0.04084129669200021,50.80518791470644],[-0.040901988153855894,50.80518791470644],[-0.040901988153855894,50.80518791470644],[-0.04096267961571158,50.80518791470644],[-0.04096267961571158,50.80518791470644],[-0.041053716808495115,50.80518791470644],[-0.041053716808495115,50.80516873744074],[-0.041053716808495115,50.80516873744074],[-0.0411144082703508,50.80516873744074],[-0.0411144082703508,50.805149560167166],[-0.0411144082703508,50.805149560167166],[-0.04117509973220649,50.805149560167166],[-0.04117509973220649,50.805149560167166],[-0.041266136924990024,50.80513038288572],[-0.04132682838684571,50.805111205596404],[-0.04132682838684571,50.805111205596404],[-0.041417865579629246,50.805092028299214],[-0.04150890277241277,50.80507285099415],[-0.04153924850334062,50.805053673681215],[-0.04159993996519631,50.805053673681215],[-0.041660631427051995,50.805034496360406],[-0.04172132288890768,50.805015319031725],[-0.041751668619835515,50.80499614169517],[-0.0418123600816912,50.80497696435074],[-0.0418123600816912,50.80497696435074],[-0.04190339727447475,50.80493860963827],[-0.04190339727447475,50.80493860963827],[-0.041964088736330424,50.804919432270225],[-0.041964088736330424,50.804919432270225],[-0.04199443446725827,50.80490025489431],[-0.04199443446725827,50.80490025489431],[-0.04202478019818611,50.80488107751057],[-0.04202478019818611,50.80488107751057],[-0.0420854716600418,50.80488107751057],[-0.042115817390969645,50.80486190011891],[-0.042115817390969645,50.80486190011891],[-0.04217650885282534,50.80484272271937],[-0.04217650885282534,50.80484272271937],[-0.04220685458375318,50.80482354531199],[-0.04226754604560887,50.80480436789671],[-0.04229789177653671,50.80478519047358],[-0.042358583238392394,50.80476601304255],[-0.04238892896932024,50.80474683560368],[-0.04238892896932024,50.80474683560368],[-0.042479966162103776,50.80472765815696],[-0.042571003354887296,50.8046893032398],[-0.042631694816742984,50.80467012576946],[-0.042631694816742984,50.8046509482912],[-0.042631694816742984,50.8046509482912],[-0.04266204054767084,50.80463177080509],[-0.04266204054767084,50.80463177080509],[-0.042722732009526525,50.80461259331108],[-0.042722732009526525,50.80461259331108],[-0.04275307774045437,50.804574238299494],[-0.04275307774045437,50.804574238299494],[-0.04281376920231005,50.804574238299494],[-0.04284411493323789,50.80453588325645],[-0.04284411493323789,50.80453588325645],[-0.04287446066416573,50.804516705723074],[-0.04287446066416573,50.80447835063279],[-0.04293515212602143,50.804459173075855],[-0.04299584358787712,50.804420817938336],[-0.043177917973444176,50.8043057523368],[-0.043177917973444176,50.80428657470901],[-0.043177917973444176,50.80426739707332],[-0.04323860943529986,50.80424821942978],[-0.04323860943529986,50.80422904177837],[-0.04326895516622771,50.80420986411906],[-0.04329930089715556,50.8041906864519],[-0.043390338089939084,50.804152331093945],[-0.04342068382086692,50.80411397570455],[-0.043451029551794765,50.80407562028361],[-0.04351172101365045,50.804056442561375],[-0.043542066744578306,50.804018087093255],[-0.04363310393736183,50.803960553831956],[-0.04378483259200105,50.8038646649058],[-0.043815178322928895,50.803845487096964],[-0.04384552405385674,50.80380713145564],[-0.04387586978478458,50.8037687757828],[-0.04390621551571242,50.803749597934626],[-0.04393656124664027,50.80373042007855],[-0.04393656124664027,50.803711242214604],[-0.04396690697756811,50.80369206434278],[-0.04399725270849595,50.80367288646306],[-0.044027598439423804,50.803653708575496],[-0.044057944170351644,50.80363453068003],[-0.044088289901279484,50.80359617486556],[-0.04411863563220734,50.803576996946504],[-0.04417932709406302,50.80353864108477],[-0.044209672824990866,50.803500285191575],[-0.0442400185559187,50.803481107233154],[-0.044270364286846546,50.80344275129269],[-0.0443007100177744,50.80340439532077],[-0.0443007100177744,50.80336603931738],[-0.04433105574870224,50.80334686130385],[-0.04433105574870224,50.8033085052532],[-0.04436140147963007,50.80328932721608],[-0.04439174721055793,50.803270149171084],[-0.044422092941485775,50.80325097111822],[-0.04445243867241361,50.80323179305742],[-0.04445243867241361,50.80319343691235],[-0.04445243867241361,50.803155080735735],[-0.04445243867241361,50.80313590263566],[-0.04445243867241361,50.803116724527655],[-0.04445243867241361,50.803097546411806],[-0.04445243867241361,50.803078368288084],[-0.04445243867241361,50.80305919015652],[-0.044482784403341455,50.80304001201705],[-0.044482784403341455,50.80298247755141],[-0.044482784403341455,50.80296329938045],[-0.044482784403341455,50.80294412120165],[-0.044482784403341455,50.80292494301494],[-0.044482784403341455,50.802905764820395],[-0.044482784403341455,50.80286740840765],[-0.044482784403341455,50.802848230189454],[-0.044482784403341455,50.80279069548769],[-0.04445243867241361,50.80275233898047],[-0.044422092941485775,50.80271398244179],[-0.044422092941485775,50.802675625871586],[-0.044422092941485775,50.80265644757469],[-0.044422092941485775,50.80261809095728],[-0.044422092941485775,50.80259891263677],[-0.044422092941485775,50.80257973430838],[-0.044422092941485775,50.80254137762802],[-0.044422092941485775,50.802522199275984],[-0.044422092941485775,50.802503020916134],[-0.044422092941485775,50.802483842548384],[-0.044422092941485775,50.80242630739795],[-0.044422092941485775,50.80236877217661],[-0.044422092941485775,50.80233041532304],[-0.044422092941485775,50.802311236884464],[-0.044422092941485775,50.802292058437985],[-0.04439174721055793,50.802253701521465],[-0.04439174721055793,50.802215344573426],[-0.04439174721055793,50.80219616608761],[-0.04439174721055793,50.802176987593896],[-0.04439174721055793,50.8021386305829],[-0.04439174721055793,50.8021194520656],[-0.04439174721055793,50.80210027354042],[-0.04439174721055793,50.80208109500734],[-0.04439174721055793,50.802042737917645],[-0.04439174721055793,50.802023559360975],[-0.04439174721055793,50.801985202224046],[-0.04436140147963007,50.80196602364376],[-0.04436140147963007,50.801946845055596],[-0.04436140147963007,50.80192766645956],[-0.04436140147963007,50.801908487855684],[-0.04436140147963007,50.801889309243876],[-0.04436140147963007,50.80187013062425],[-0.04436140147963007,50.801850951996755],[-0.04436140147963007,50.801812594718086],[-0.0443007100177744,50.801755058741094],[-0.0443007100177744,50.8017167013837],[-0.044270364286846546,50.801678343994894],[-0.0442400185559187,50.8016208078526],[-0.0442400185559187,50.80158245038501],[-0.04417932709406302,50.801563271639424],[-0.04417932709406302,50.8015249141246],[-0.04414898136313518,50.80148655657834],[-0.04411863563220734,50.80144819900056],[-0.044088289901279484,50.80142902019983],[-0.044088289901279484,50.801390662574875],[-0.044057944170351644,50.80135230491837],[-0.04399725270849595,50.80129476837459],[-0.04399725270849595,50.80125641063941],[-0.04396690697756811,50.801237231759984],[-0.04396690697756811,50.801218052872684],[-0.04393656124664027,50.801218052872684],[-0.04393656124664027,50.80119887397754],[-0.04390621551571242,50.80119887397754],[-0.04390621551571242,50.801179695074495],[-0.04384552405385674,50.80108380044129],[-0.04269238627859867,50.80008648458974]]]}}]}
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG-OSM-CLIP", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "selection": json.dumps(geojson), "tags": [],
                    "provider_tasks": [{"provider": "OpenStreetMap Data", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_wms_geojson(self):
        """
        This test is to ensure that an ArcGIS Feature Service job will export a gpkg file.
        :returns:
        """
        geojson = {"type":"FeatureCollection","features":[{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[-0.04269238627859867,50.80008648458974],[-0.04269238627859867,50.80010566394145],[-0.04269238627859867,50.80012484328532],[-0.04266204054767084,50.80012484328532],[-0.042631694816742984,50.80014402262128],[-0.04260134908581514,50.8001632019494],[-0.042571003354887296,50.8001632019494],[-0.04254065762395946,50.80018238126962],[-0.042510311893031616,50.80018238126962],[-0.042479966162103776,50.80018238126962],[-0.042449620431175936,50.80022073988647],[-0.04238892896932024,50.80022073988647],[-0.04226754604560887,50.80023991918313],[-0.04223720031468102,50.80023991918313],[-0.04220685458375318,50.80023991918313],[-0.04217650885282534,50.800259098471855],[-0.042146163121897486,50.800259098471855],[-0.042115817390969645,50.80027827775274],[-0.042115817390969645,50.80027827775274],[-0.0420854716600418,50.80029745702575],[-0.04205512592911396,50.80031663629089],[-0.04199443446725827,50.80031663629089],[-0.04190339727447475,50.800354994797544],[-0.041873051543546896,50.800354994797544],[-0.04184270581261905,50.800354994797544],[-0.04184270581261905,50.800354994797544],[-0.04178201435076336,50.800374174039064],[-0.04178201435076336,50.800412532498484],[-0.041751668619835515,50.800412532498484],[-0.04172132288890768,50.800431711716385],[-0.041660631427051995,50.800431711716385],[-0.041630285696124154,50.80045089092641],[-0.04159993996519631,50.80048924932285],[-0.04153924850334062,50.80050842850926],[-0.041478557041484926,50.8005276076878],[-0.041448211310557086,50.80054678685849],[-0.0413875198487014,50.80056596602128],[-0.04135717411777356,50.80058514517623],[-0.04132682838684571,50.80058514517623],[-0.041296482655917864,50.800604324323274],[-0.041266136924990024,50.80062350346245],[-0.04123579119406218,50.80062350346245],[-0.04120544546313433,50.80062350346245],[-0.04117509973220649,50.80062350346245],[-0.04114475400127865,50.800642682593775],[-0.04108406253942297,50.800642682593775],[-0.04108406253942297,50.800642682593775],[-0.041053716808495115,50.8006618617172],[-0.04102337107756727,50.80068104083276],[-0.040993025346639435,50.80070021994047],[-0.04096267961571158,50.800719399040304],[-0.04096267961571158,50.800719399040304],[-0.040932333884783734,50.80073857813224],[-0.040901988153855894,50.80073857813224],[-0.040901988153855894,50.80073857813224],[-0.04087164242292806,50.80075775721633],[-0.04081095096107237,50.80079611536087],[-0.04078060523014453,50.80081529442134],[-0.04075025949921668,50.80081529442134],[-0.04071991376828884,50.80085365251864],[-0.040659222306433145,50.800872831555495],[-0.040659222306433145,50.800872831555495],[-0.040628876575505304,50.80089201058445],[-0.040628876575505304,50.80089201058445],[-0.040598530844577464,50.80091118960556],[-0.04056818511364962,50.80093036861882],[-0.04053783938272178,50.80093036861882],[-0.04047714792086608,50.800968726621676],[-0.040416456459010396,50.800987905611265],[-0.040386110728082555,50.80100708459301],[-0.04026472780437119,50.80102626356691],[-0.04023438207344335,50.80102626356691],[-0.04023438207344335,50.80102626356691],[-0.040204036342515494,50.80104544253288],[-0.04017369061158765,50.80108380044129],[-0.0401433448806598,50.80108380044129],[-0.04011299914973196,50.80110297938367],[-0.04008265341880411,50.80110297938367],[-0.04002196195694843,50.80112215831818],[-0.0399309247641649,50.801160516163634],[-0.03990057903323706,50.801160516163634],[-0.03987023330230921,50.801179695074495],[-0.03983988757138137,50.80119887397754],[-0.03980954184045352,50.801218052872684],[-0.03977919610952568,50.801218052872684],[-0.03974885037859784,50.801237231759984],[-0.039718504647669996,50.80125641063941],[-0.039718504647669996,50.80125641063941],[-0.039688158916742156,50.80127558951094],[-0.03965781318581431,50.80129476837459],[-0.03962746745488646,50.8013139472304],[-0.03953643026210293,50.80135230491837],[-0.03950608453117509,50.801390662574875],[-0.03947573880024725,50.801390662574875],[-0.0394453930693194,50.80142902019983],[-0.039415047338391566,50.80144819900056],[-0.039415047338391566,50.80144819900056],[-0.03938470160746371,50.80148655657834],[-0.039354355876535865,50.80150573535542],[-0.03932401014560802,50.8015249141246],[-0.03932401014560802,50.8015249141246],[-0.03929366441468018,50.801563271639424],[-0.03923297295282449,50.8016016291227],[-0.03920262722189666,50.8016208078526],[-0.03917228149096881,50.80163998657457],[-0.03914193576004097,50.80165916528867],[-0.03914193576004097,50.80165916528867],[-0.03911159002911312,50.801678343994894],[-0.03911159002911312,50.801678343994894],[-0.039081244298185276,50.8017167013837],[-0.03905089856725742,50.8017167013837],[-0.03905089856725742,50.801755058741094],[-0.03899020710540174,50.801774237407955],[-0.0389598613744739,50.801812594718086],[-0.03892951564354606,50.801812594718086],[-0.038899169912618214,50.80183177336136],[-0.038899169912618214,50.80183177336136],[-0.038868824181690374,50.80187013062425],[-0.038868824181690374,50.80192766645956],[-0.038868824181690374,50.80192766645956],[-0.03883847845076253,50.801985202224046],[-0.03883847845076253,50.801985202224046],[-0.03880813271983468,50.802042737917645],[-0.03877778698890684,50.802061916466414],[-0.03877778698890684,50.802061916466414],[-0.03874744125797899,50.80208109500734],[-0.03874744125797899,50.8021194520656],[-0.038717095527051146,50.802157809092336],[-0.038686749796123306,50.802176987593896],[-0.038686749796123306,50.802215344573426],[-0.038656404065195465,50.802234523051396],[-0.038656404065195465,50.80227287998366],[-0.038656404065195465,50.80227287998366],[-0.03862605833426762,50.802349593753746],[-0.038595712603339785,50.80236877217661],[-0.03856536687241193,50.80240712899868],[-0.03853502114148409,50.80242630739795],[-0.038504675410556244,50.80244548578929],[-0.038504675410556244,50.80244548578929],[-0.0384743296796284,50.802483842548384],[-0.0384743296796284,50.802483842548384],[-0.0384743296796284,50.80254137762802],[-0.03844398394870056,50.80256055597215],[-0.03844398394870056,50.80256055597215],[-0.03844398394870056,50.80261809095728],[-0.03841363821777271,50.80263726926992],[-0.03841363821777271,50.80263726926992],[-0.03841363821777271,50.802675625871586],[-0.03841363821777271,50.802675625871586],[-0.03841363821777271,50.802733160715064],[-0.03841363821777271,50.80277151723803],[-0.03841363821777271,50.80277151723803],[-0.03841363821777271,50.802829051963414],[-0.03841363821777271,50.802829051963414],[-0.03841363821777271,50.80286740840765],[-0.038383292486844876,50.80288658661797],[-0.038383292486844876,50.80288658661797],[-0.03835294675591703,50.80294412120165],[-0.03835294675591703,50.80294412120165],[-0.038322601024989175,50.80300165571447],[-0.038322601024989175,50.80304001201705],[-0.038322601024989175,50.80304001201705],[-0.038322601024989175,50.803116724527655],[-0.038322601024989175,50.803116724527655],[-0.038322601024989175,50.803174258827966],[-0.038322601024989175,50.803174258827966],[-0.03829225529406134,50.80321261498884],[-0.03829225529406134,50.80321261498884],[-0.03829225529406134,50.80325097111822],[-0.03829225529406134,50.80325097111822],[-0.03829225529406134,50.80328932721608],[-0.03829225529406134,50.80334686130385],[-0.03829225529406134,50.80342357331068],[-0.038261909563133495,50.80351946314212],[-0.038261909563133495,50.80351946314212],[-0.038261909563133495,50.803557819019545],[-0.038261909563133495,50.803557819019545],[-0.038261909563133495,50.80361535277672],[-0.038261909563133495,50.803653708575496],[-0.038261909563133495,50.803653708575496],[-0.038261909563133495,50.803711242214604],[-0.038261909563133495,50.803711242214604],[-0.038261909563133495,50.803749597934626],[-0.038261909563133495,50.803749597934626],[-0.038261909563133495,50.803787953623186],[-0.038261909563133495,50.803787953623186],[-0.038261909563133495,50.803826309280225],[-0.038261909563133495,50.803826309280225],[-0.038261909563133495,50.803883842706796],[-0.038261909563133495,50.803883842706796],[-0.038261909563133495,50.80392219828511],[-0.038261909563133495,50.803960553831956],[-0.038261909563133495,50.803960553831956],[-0.038261909563133495,50.80399890934734],[-0.03829225529406134,50.80403726483121],[-0.03829225529406134,50.80403726483121],[-0.03829225529406134,50.804094797998005],[-0.03829225529406134,50.804094797998005],[-0.03829225529406134,50.8041331534032],[-0.03829225529406134,50.8041331534032],[-0.038322601024989175,50.804152331093945],[-0.038322601024989175,50.804152331093945],[-0.03835294675591703,50.8041906864519],[-0.038383292486844876,50.80420986411906],[-0.038383292486844876,50.80420986411906],[-0.03841363821777271,50.80424821942978],[-0.03844398394870056,50.80426739707332],[-0.038504675410556244,50.8043057523368],[-0.03853502114148409,50.80432492995672],[-0.03856536687241193,50.804344107568795],[-0.03856536687241193,50.804344107568795],[-0.03862605833426762,50.8043824627693],[-0.038656404065195465,50.804401640357725],[-0.038686749796123306,50.80443999551102],[-0.038686749796123306,50.80443999551102],[-0.03874744125797899,50.804459173075855],[-0.03874744125797899,50.804459173075855],[-0.03880813271983468,50.804497528181884],[-0.03880813271983468,50.804497528181884],[-0.0389598613744739,50.804574238299494],[-0.03902055283632959,50.80461259331108],[-0.03905089856725742,50.80463177080509],[-0.03914193576004097,50.8046893032398],[-0.03917228149096881,50.80470848070232],[-0.03920262722189666,50.80472765815696],[-0.03923297295282449,50.80474683560368],[-0.03923297295282449,50.80474683560368],[-0.03929366441468018,50.80476601304255],[-0.03932401014560802,50.80478519047358],[-0.039354355876535865,50.80480436789671],[-0.039354355876535865,50.80480436789671],[-0.039415047338391566,50.80482354531199],[-0.039415047338391566,50.80482354531199],[-0.039415047338391566,50.80486190011891],[-0.03947573880024725,50.80486190011891],[-0.03947573880024725,50.80486190011891],[-0.03950608453117509,50.804919432270225],[-0.039597121723958614,50.80495778699844],[-0.03962746745488646,50.80499614169517],[-0.03965781318581431,50.805034496360406],[-0.039688158916742156,50.805053673681215],[-0.03974885037859784,50.805053673681215],[-0.03974885037859784,50.805053673681215],[-0.03977919610952568,50.80507285099415],[-0.03977919610952568,50.80507285099415],[-0.03980954184045352,50.805092028299214],[-0.03983988757138137,50.805111205596404],[-0.03983988757138137,50.805111205596404],[-0.03990057903323706,50.80513038288572],[-0.03996127049509275,50.80513038288572],[-0.03999161622602059,50.805149560167166],[-0.04005230768787628,50.80516873744074],[-0.04011299914973196,50.80516873744074],[-0.04017369061158765,50.80516873744074],[-0.04017369061158765,50.80516873744074],[-0.04023438207344335,50.80516873744074],[-0.04044680218993824,50.80518791470644],[-0.04050749365179394,50.80518791470644],[-0.04056818511364962,50.80518791470644],[-0.040628876575505304,50.80518791470644],[-0.04068956803736099,50.80518791470644],[-0.04068956803736099,50.80518791470644],[-0.04078060523014453,50.80518791470644],[-0.04084129669200021,50.80518791470644],[-0.040901988153855894,50.80518791470644],[-0.040901988153855894,50.80518791470644],[-0.04096267961571158,50.80518791470644],[-0.04096267961571158,50.80518791470644],[-0.041053716808495115,50.80518791470644],[-0.041053716808495115,50.80516873744074],[-0.041053716808495115,50.80516873744074],[-0.0411144082703508,50.80516873744074],[-0.0411144082703508,50.805149560167166],[-0.0411144082703508,50.805149560167166],[-0.04117509973220649,50.805149560167166],[-0.04117509973220649,50.805149560167166],[-0.041266136924990024,50.80513038288572],[-0.04132682838684571,50.805111205596404],[-0.04132682838684571,50.805111205596404],[-0.041417865579629246,50.805092028299214],[-0.04150890277241277,50.80507285099415],[-0.04153924850334062,50.805053673681215],[-0.04159993996519631,50.805053673681215],[-0.041660631427051995,50.805034496360406],[-0.04172132288890768,50.805015319031725],[-0.041751668619835515,50.80499614169517],[-0.0418123600816912,50.80497696435074],[-0.0418123600816912,50.80497696435074],[-0.04190339727447475,50.80493860963827],[-0.04190339727447475,50.80493860963827],[-0.041964088736330424,50.804919432270225],[-0.041964088736330424,50.804919432270225],[-0.04199443446725827,50.80490025489431],[-0.04199443446725827,50.80490025489431],[-0.04202478019818611,50.80488107751057],[-0.04202478019818611,50.80488107751057],[-0.0420854716600418,50.80488107751057],[-0.042115817390969645,50.80486190011891],[-0.042115817390969645,50.80486190011891],[-0.04217650885282534,50.80484272271937],[-0.04217650885282534,50.80484272271937],[-0.04220685458375318,50.80482354531199],[-0.04226754604560887,50.80480436789671],[-0.04229789177653671,50.80478519047358],[-0.042358583238392394,50.80476601304255],[-0.04238892896932024,50.80474683560368],[-0.04238892896932024,50.80474683560368],[-0.042479966162103776,50.80472765815696],[-0.042571003354887296,50.8046893032398],[-0.042631694816742984,50.80467012576946],[-0.042631694816742984,50.8046509482912],[-0.042631694816742984,50.8046509482912],[-0.04266204054767084,50.80463177080509],[-0.04266204054767084,50.80463177080509],[-0.042722732009526525,50.80461259331108],[-0.042722732009526525,50.80461259331108],[-0.04275307774045437,50.804574238299494],[-0.04275307774045437,50.804574238299494],[-0.04281376920231005,50.804574238299494],[-0.04284411493323789,50.80453588325645],[-0.04284411493323789,50.80453588325645],[-0.04287446066416573,50.804516705723074],[-0.04287446066416573,50.80447835063279],[-0.04293515212602143,50.804459173075855],[-0.04299584358787712,50.804420817938336],[-0.043177917973444176,50.8043057523368],[-0.043177917973444176,50.80428657470901],[-0.043177917973444176,50.80426739707332],[-0.04323860943529986,50.80424821942978],[-0.04323860943529986,50.80422904177837],[-0.04326895516622771,50.80420986411906],[-0.04329930089715556,50.8041906864519],[-0.043390338089939084,50.804152331093945],[-0.04342068382086692,50.80411397570455],[-0.043451029551794765,50.80407562028361],[-0.04351172101365045,50.804056442561375],[-0.043542066744578306,50.804018087093255],[-0.04363310393736183,50.803960553831956],[-0.04378483259200105,50.8038646649058],[-0.043815178322928895,50.803845487096964],[-0.04384552405385674,50.80380713145564],[-0.04387586978478458,50.8037687757828],[-0.04390621551571242,50.803749597934626],[-0.04393656124664027,50.80373042007855],[-0.04393656124664027,50.803711242214604],[-0.04396690697756811,50.80369206434278],[-0.04399725270849595,50.80367288646306],[-0.044027598439423804,50.803653708575496],[-0.044057944170351644,50.80363453068003],[-0.044088289901279484,50.80359617486556],[-0.04411863563220734,50.803576996946504],[-0.04417932709406302,50.80353864108477],[-0.044209672824990866,50.803500285191575],[-0.0442400185559187,50.803481107233154],[-0.044270364286846546,50.80344275129269],[-0.0443007100177744,50.80340439532077],[-0.0443007100177744,50.80336603931738],[-0.04433105574870224,50.80334686130385],[-0.04433105574870224,50.8033085052532],[-0.04436140147963007,50.80328932721608],[-0.04439174721055793,50.803270149171084],[-0.044422092941485775,50.80325097111822],[-0.04445243867241361,50.80323179305742],[-0.04445243867241361,50.80319343691235],[-0.04445243867241361,50.803155080735735],[-0.04445243867241361,50.80313590263566],[-0.04445243867241361,50.803116724527655],[-0.04445243867241361,50.803097546411806],[-0.04445243867241361,50.803078368288084],[-0.04445243867241361,50.80305919015652],[-0.044482784403341455,50.80304001201705],[-0.044482784403341455,50.80298247755141],[-0.044482784403341455,50.80296329938045],[-0.044482784403341455,50.80294412120165],[-0.044482784403341455,50.80292494301494],[-0.044482784403341455,50.802905764820395],[-0.044482784403341455,50.80286740840765],[-0.044482784403341455,50.802848230189454],[-0.044482784403341455,50.80279069548769],[-0.04445243867241361,50.80275233898047],[-0.044422092941485775,50.80271398244179],[-0.044422092941485775,50.802675625871586],[-0.044422092941485775,50.80265644757469],[-0.044422092941485775,50.80261809095728],[-0.044422092941485775,50.80259891263677],[-0.044422092941485775,50.80257973430838],[-0.044422092941485775,50.80254137762802],[-0.044422092941485775,50.802522199275984],[-0.044422092941485775,50.802503020916134],[-0.044422092941485775,50.802483842548384],[-0.044422092941485775,50.80242630739795],[-0.044422092941485775,50.80236877217661],[-0.044422092941485775,50.80233041532304],[-0.044422092941485775,50.802311236884464],[-0.044422092941485775,50.802292058437985],[-0.04439174721055793,50.802253701521465],[-0.04439174721055793,50.802215344573426],[-0.04439174721055793,50.80219616608761],[-0.04439174721055793,50.802176987593896],[-0.04439174721055793,50.8021386305829],[-0.04439174721055793,50.8021194520656],[-0.04439174721055793,50.80210027354042],[-0.04439174721055793,50.80208109500734],[-0.04439174721055793,50.802042737917645],[-0.04439174721055793,50.802023559360975],[-0.04439174721055793,50.801985202224046],[-0.04436140147963007,50.80196602364376],[-0.04436140147963007,50.801946845055596],[-0.04436140147963007,50.80192766645956],[-0.04436140147963007,50.801908487855684],[-0.04436140147963007,50.801889309243876],[-0.04436140147963007,50.80187013062425],[-0.04436140147963007,50.801850951996755],[-0.04436140147963007,50.801812594718086],[-0.0443007100177744,50.801755058741094],[-0.0443007100177744,50.8017167013837],[-0.044270364286846546,50.801678343994894],[-0.0442400185559187,50.8016208078526],[-0.0442400185559187,50.80158245038501],[-0.04417932709406302,50.801563271639424],[-0.04417932709406302,50.8015249141246],[-0.04414898136313518,50.80148655657834],[-0.04411863563220734,50.80144819900056],[-0.044088289901279484,50.80142902019983],[-0.044088289901279484,50.801390662574875],[-0.044057944170351644,50.80135230491837],[-0.04399725270849595,50.80129476837459],[-0.04399725270849595,50.80125641063941],[-0.04396690697756811,50.801237231759984],[-0.04396690697756811,50.801218052872684],[-0.04393656124664027,50.801218052872684],[-0.04393656124664027,50.80119887397754],[-0.04390621551571242,50.80119887397754],[-0.04390621551571242,50.801179695074495],[-0.04384552405385674,50.80108380044129],[-0.04269238627859867,50.80008648458974]]]}}]}
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "TestGPKG-OSM-CLIP", "description": "Test Description",
                    "event": "TestProject", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3], "selection": json.dumps(geojson), "tags": [],
                    "provider_tasks": [{"provider": "eventkit-integration-test-wms", "formats": ["gpkg"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_all(self):
        """
        This test ensures that if all formats and all providers are selected that the test will finish.
        :return:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "test", "description": "test",
                    "event": "test", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3],
                    "tags": [], "provider_tasks": [{"provider": "eventkit-integration-test-wms",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "OpenStreetMap Data (Generic)",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "OpenStreetMap Data",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-wmts",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-arc-raster",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-wfs",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-arc-fs",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]}]}
        self.assertTrue(self.run_job(job_data))

    def test_rerun_all(self):
        """
        This test ensures that if all formats and all providers are selected
        that the test will finish then successfully rerun.
        :return:
        """
        job_data = {"csrfmiddlewaretoken": self.csrftoken, "name": "test", "description": "test",
                    "event": "test", "xmin": self.bbox[0], "ymin": self.bbox[1], "xmax": self.bbox[2],
                    "ymax": self.bbox[3],
                    "tags": [], "provider_tasks": [{"provider": "eventkit-integration-test-wms",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "OpenStreetMap Data (Generic)",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "OpenStreetMap Data",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-wmts",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-arc-raster",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-wfs",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]},
                                                   {"provider": "eventkit-integration-test-arc-fs",
                                                    "formats": ["shp", "gpkg", "kml", "sqlite"]}]}
        response = self.client.post(self.jobs_url,
                                    json=job_data,
                                    headers={'X-CSRFToken': self.csrftoken,
                                             'Referer': self.create_export_url})
        self.assertEquals(response.status_code, 202)
        job = response.json()

        run = self.wait_for_run(job.get('uid'))
        self.assertTrue(run.get('status') == "COMPLETED")
        for provider_task in run.get('provider_tasks'):
            geopackage_url = self.get_gpkg_url(run, provider_task.get("name"))
            if not geopackage_url:
                continue
            geopackage_file = self.download_file(geopackage_url)
            self.assertTrue(os.path.isfile(geopackage_file))
            self.assertTrue(check_content_exists(geopackage_file))
            os.remove(geopackage_file)

        rerun_response = self.client.get(self.rerun_url,
                                         params={'job_uid': job.get('uid')},
                                         headers={'X-CSRFToken': self.csrftoken,
                                                  'Referer': self.create_export_url})

        self.assertEquals(rerun_response.status_code, 202)
        rerun = self.wait_for_run(job.get('uid'))
        self.assertTrue(rerun.get('status') == "COMPLETED")
        for provider_task in rerun.get('provider_tasks'):
            geopackage_url = self.get_gpkg_url(rerun, provider_task.get("name"))
            if not geopackage_url:
                continue
            geopackage_file = self.download_file(geopackage_url)
            self.assertTrue(os.path.isfile(geopackage_file))
            self.assertTrue(check_content_exists(geopackage_file))
            os.remove(geopackage_file)

        delete_response = self.client.delete(self.jobs_url + '/' + job.get('uid'),
                                             headers={'X-CSRFToken': self.csrftoken, 'Referer': self.create_export_url})
        self.assertTrue(delete_response)

    def run_job(self, data, wait_for_run=True):
        # include zipfile
        data['include_zipfile'] = True

        response = self.client.post(self.jobs_url,
                                    json=data,
                                    headers={'X-CSRFToken': self.csrftoken,
                                             'Referer': self.create_export_url})

        self.assertEquals(response.status_code, 202)
        job = response.json()

        if not wait_for_run:
            return job

        run = self.wait_for_run(job.get('uid'))
        self.orm_job = orm_job = Job.objects.get(uid=job.get('uid'))
        self.orm_run = orm_run = orm_job.runs.last()
        date = timezone.now().strftime('%Y%m%d')
        test_zip_url = '%s%s%s/%s' % (
            self.base_url,
            settings.EXPORT_MEDIA_ROOT,
            run.get('uid'),
            '%s-%s-%s-%s.zip' % (
                orm_run.job.name,
                orm_run.job.event,
                'eventkit',
                date
            ))

        if not getattr(settings, "USE_S3", False):
            self.assertEquals(test_zip_url, run['zipfile_url'])

        assert '.zip' in orm_run.zipfile_url

        self.assertTrue(run.get('status') == "COMPLETED")
        for provider_task in run.get('provider_tasks'):
            geopackage_url = self.get_gpkg_url(run, provider_task.get("name"))
            if not geopackage_url:
                continue
            geopackage_file = self.download_file(geopackage_url)
            self.assertTrue(os.path.isfile(geopackage_file))
            self.assertTrue(check_content_exists(geopackage_file))
            self.assertTrue(check_zoom_levels(geopackage_file))
            os.remove(geopackage_file)
        # delete_response = self.client.delete(self.jobs_url + '/' + job.get('uid'),
        #                                      headers={'X-CSRFToken': self.csrftoken, 'Referer': self.create_export_url})
        # self.assertTrue(delete_response)
        for provider_task in run.get('provider_tasks'):
            geopackage_url = self.get_gpkg_url(run, provider_task.get("name"))
            if not geopackage_url:
                continue
            geopackage_file = self.download_file(geopackage_url)
            self.assertNotTrue(os.path.isfile(geopackage_file))
            if os.path.isfile(geopackage_file):
                os.remove(geopackage_file)
        return True

    def wait_for_task_pickup(self, job_uid):
        picked_up = False
        response = None
        while not picked_up:
            sleep(1)
            response = self.client.get(
                self.runs_url,
                params={"job_uid": job_uid},
                headers={'X-CSRFToken': self.csrftoken}).json()
            if response[0].get('provider_tasks'):
                picked_up = True
        return response[0]

    def wait_for_run(self, job_uid):
        finished = False
        response = None
        while not finished:
            sleep(1)
            response = self.client.get(
                self.runs_url,
                params={"job_uid": job_uid},
                headers={'X-CSRFToken': self.csrftoken
                         }).json()
            status = response[0].get('status')
            if status in [TaskStates.COMPLETED.value, TaskStates.INCOMPLETE.value, TaskStates.CANCELED.value]:
                finished = True
        return response[0]

    def download_file(self, url, download_dir=None):
        download_dir = download_dir or self.download_dir
        file_location = os.path.join(download_dir, os.path.basename(url))
        r = requests.get(url, stream=True)
        if r.status_code == 200:
            with open(file_location, 'wb') as f:
                for chunk in r:
                    f.write(chunk)
            return file_location
        else:
            print("Failed to download GPKG, STATUS_CODE: {0}".format(r.status_code))
        return None

    @staticmethod
    def get_gpkg_url(run, provider_task_name):
        for provider_task in run.get("provider_tasks"):
            if provider_task.get('name') == provider_task_name:
                for task in provider_task.get('tasks'):
                    if task.get('name') == "Geopackage":
                        return task.get('result').get("url")
        return None


def get_providers_list():
    return [{
        "model": "jobs.exportprovider",
        "fields": {
            "created_at": "2016-10-06T17:44:54.837Z",
            "updated_at": "2016-10-06T17:44:54.837Z",
            "name": "eventkit-integration-test-wms",
            "slug": "eventkit-integration-test-wms",
            "url": "http://basemap.nationalmap.gov/arcgis/services/USGSImageryOnly/MapServer/WmsServer?",
            "layer": "0",
            "export_provider_type": ExportProviderType.objects.using('default').get(type_name='wms'),
            "level_from": 0,
            "level_to": 2,
            "config": ""
        }
    }, {
        "model": "jobs.exportprovider",
        "fields": {
            "created_at": "2016-10-06T17:45:46.213Z",
            "updated_at": "2016-10-06T17:45:46.213Z",
            "name": "eventkit-integration-test-wmts",
            "url": "https://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=USGSShadedReliefOnly&TILEMATRIXSET=WEBMERCATOR&TILEMATRIX=%(z)s&TILEROW=%(y)s&TILECOL=%(x)s&FORMAT=image%%2Fpng",
            "layer": "imagery",
            "export_provider_type": ExportProviderType.objects.using('default').get(type_name='wmts'),
            "level_from": 0,
            "level_to": 2,
            "config": "layers:\r\n - name: imagery\r\n   title: imagery\r\n   sources: [cache]\r\n\r\n"
                      "sources:\r\n"
                      "  imagery_wmts:\r\n"
                      "    type: tile\r\n"
                      "    grid: webmercator\r\n"
                      "    url: https://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=USGSShadedReliefOnly&TILEMATRIXSET=WEBMERCATOR&TILEMATRIX=%(z)s&TILEROW=%(y)s&TILECOL=%(x)s&FORMAT=image%%2Fpng\r\n\r\n"
                      "grids:\r\n  webmercator:\r\n    srs: EPSG:3857\r\n    tile_size: [256, 256]\r\n    origin: nw"
        }
    }, {
        "model": "jobs.exportprovider",
        "fields": {
            "created_at": "2016-10-06T19:17:28.770Z",
            "updated_at": "2016-10-06T19:17:28.770Z",
            "name": "eventkit-integration-test-arc-raster",
            "slug": "eventkit-integration-test-arc-raster",
            "url": "http://server.arcgisonline.com/arcgis/rest/services/ESRI_Imagery_World_2D/MapServer",
            "layer": "imagery",
            "export_provider_type": ExportProviderType.objects.using('default').get(type_name='arcgis-raster'),
            "level_from": 0,
            "level_to": 2,
            "config": "layer:\r\n  - name: imagery\r\n    title: imagery\r\n    sources: [cache]\r\n\r\n"
                      "sources:\r\n"
                      "  imagery_arcgis-raster:\r\n"
                      "    type: arcgis\r\n"
                      "    grid: webmercator\r\n"
                      "    req:\r\n"
                      "      url: http://server.arcgisonline.com/arcgis/rest/services/ESRI_Imagery_World_2D/MapServer\r\n"
                      "      layers: \r\n"
                      "        show: 0\r\n\r\n"
                      "grids:\r\n  webmercator:\r\n    srs: EPSG:3857\r\n    tile_size: [256, 256]\r\n    origin: nw"
        }
    }, {
        "model": "jobs.exportprovider",
        "fields": {
            "created_at": "2016-10-13T17:23:26.890Z",
            "updated_at": "2016-10-13T17:23:26.890Z",
            "name": "eventkit-integration-test-wfs",
            "slug": "eventkit-integration-test-wfs",
            "url": "http://geonode.state.gov/geoserver/wfs?SERVICE=WFS&VERSION=1.0.0&REQUEST=GetFeature&TYPENAME=geonode:EurasiaOceania_LSIB_Polygons_Simplified_2015&SRSNAME=EPSG:4326",
            "layer": "geonode:EurasiaOceania_LSIB_Polygons_Simplified_2015",
            "export_provider_type": ExportProviderType.objects.using('default').get(type_name='wfs'),
            "level_from": 0,
            "level_to": 2,
            "config": ""
        }
    }, {
        "model": "jobs.exportprovider",
        "fields": {
            "created_at": "2016-10-21T14:30:27.066Z",
            "updated_at": "2016-10-21T14:30:27.066Z",
            "name": "eventkit-integration-test-arc-fs",
            "slug": "eventkit-integration-test-arc-fs",
            "url": "http://services1.arcgis.com/0IrmI40n5ZYxTUrV/ArcGIS/rest/services/ONS_Boundaries_02/FeatureServer/0/query?where=objectid%3Dobjectid&outfields=*&f=json",
            "layer": "0",
            "export_provider_type": ExportProviderType.objects.using('default').get(type_name='arcgis-feature'),
            "level_from": 0,
            "level_to": 2,
            "config": ""
        }
    }]


def load_providers():
    export_providers = get_providers_list()
    for export_provider in export_providers:
        try:
            provider = ExportProvider.objects.using('default').create(
                name=export_provider.get('fields').get('name'),
                slug=export_provider.get('fields').get('slug'), url=export_provider.get('fields').get('url'),
                layer=export_provider.get('fields').get('layer'),
                export_provider_type=export_provider.get('fields').get('export_provider_type'),
                level_from=export_provider.get('fields').get('level_from'),
                level_to=export_provider.get('fields').get('level_to'),
                config=export_provider.get('fields').get('config'))
            provider.save(using='default')
        except IntegrityError:
            continue


def delete_providers():
    export_providers = get_providers_list()
    for export_provider in export_providers:
        provider = ExportProvider.objects.using('default').get(
            name=export_provider.get('fields').get('name')
        )
        provider.delete(using='default')
