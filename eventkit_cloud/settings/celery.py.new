# -*- coding: utf-8 -*-
from __future__ import absolute_import

from celery.schedules import crontab

from .contrib import *  # NOQA
import os
import json

# Celery config
task_track_started = True

"""
 IMPORTANT

 Don't propagate exceptions in the celery chord header to the finalize task.
 If exceptions are thrown in the chord header then allow the
 finalize task to collect the results and update the overall run state.

"""
CELERY_CHORD_PROPAGATES = False
# worker_prefetch_multiplier limits the amount of tasks per worker, 0 means unlimited this is required so that a
# worker can take a whole task chain, otherwise "out-of-order" issues occur.
task_serializer = "pickle"
worker_prefetch_multiplier = 0
# beat_scheduler='djcelery.schedulers.DatabaseScheduler'
result_backend=os.environ.get('result_backend', 'django-db')
# configure periodic task
beat_schedule = {
    'purge-unpublished-exports': {
        'task': 'Purge Unpublished Exports',
        'schedule': crontab(minute='0', hour='*', day_of_week='*')
    },
    'expire-runs': {
        'task': 'Expire Runs',
        'schedule': crontab(minute='0', hour='0', day_of_week='*')
    }
}

if os.environ.get('VCAP_SERVICES'):
    services = json.loads(os.environ.get('VCAP_SERVICES'))
    try:
        broker_url = services['cloudamqp'][0]['credentials']['uri']
    except KeyError:
        broker_url = os.environ.get('broker_url', 'amqp://guest:guest@localhost:5672//')
else:
    broker_url = os.environ.get('broker_url', 'amqp://guest:guest@localhost:5672//')